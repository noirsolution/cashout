package cashout

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"strings"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

type Payload struct {
	CreditCard CreditCard `json:"credit_card"`
}

type CreditCard struct {
	Number            string      `json:"number"`
	Name              string      `json:"name"`
	StartMonth        interface{} `json:"start_month"`
	StartYear         interface{} `json:"start_year"`
	Month             int         `json:"month"`
	Year              int         `json:"year"`
	VerificationValue string      `json:"verification_value"`
	IssueNumber       string      `json:"issue_number"`
}

type SessionAnswer struct {
	ID string `json:"id"`
}

// ShopifyAddToCart add a product to a shopify cart
func (c *Cashout) ShopifyAddToCart(site, handle string, id int, client *http.Client) error {
	urlParsed, err := url.Parse(site)
	if err != nil {
		log.Fatal(err)
	}

	reqCookie, err := http.NewRequest("GET", site+"/products/"+handle, nil)
	reqCookie.Header.Set("Authority", urlParsed.Host)
	reqCookie.Header.Set("Upgrade-Insecure-Request", "1")
	reqCookie.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
	reqCookie.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	reqCookie.Header.Set("Sec-Fetch-Site", "none")
	reqCookie.Header.Set("Sec-Fetch-Mode", "navigate")
	reqCookie.Header.Set("Sec-Fetch-User", "?1")
	reqCookie.Header.Set("Sec-Fetch-Dest", "document")

	respCookie, err := client.Do(reqCookie)
	if err != nil {
		return err
	}
	defer respCookie.Body.Close()

	bodyPost := strings.NewReader(fmt.Sprintf("form_type=product&utf8=%%E2%%9C%%93&id=%v", id))
	req, err := http.NewRequest("POST", site+"/cart/add.js", bodyPost)
	if err != nil {
		return err
	}
	req.Header.Set("Authority", urlParsed.Host)
	req.Header.Set("Accept", "application/json, text/javascript, */*; q=0.01")
	req.Header.Set("X-Requested-With", "XMLHttpRequest")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
	req.Header.Set("Origin", urlParsed.Host)
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Referer", site+"/products/"+handle)
	req.Header.Set("Accept-Language", "en-US,en;q=0.9,fr;q=0.8")
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}

// ShopifyStartCashout is used to set the shipping address & method
func (c *Cashout) ShopifyStartCashout(site, firstName, lastName, email, address, zipCode, city, country, phoneNumber string, client *http.Client) (string, string, string, string, error) {

	urlParsed, err := url.Parse(site)
	if err != nil {
		log.Fatal(err)
	}

	reqPrepare, err := http.NewRequest("GET", site+"//checkout.json", nil)
	reqPrepare.Header.Set("Authority", urlParsed.Host)
	reqPrepare.Header.Set("Upgrade-Insecure-Request", "1")
	reqPrepare.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
	reqPrepare.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	reqPrepare.Header.Set("Sec-Fetch-Site", "none")
	reqPrepare.Header.Set("Sec-Fetch-Mode", "navigate")
	reqPrepare.Header.Set("Sec-Fetch-User", "?1")
	reqPrepare.Header.Set("Sec-Fetch-Dest", "document")

	respPrepare, err := client.Do(reqPrepare)
	if err != nil {
		return "", "", "", "", err
	}
	defer respPrepare.Body.Close()

	bodyPrepare, err := ioutil.ReadAll(respPrepare.Body)
	if err != nil {
		return "", "", "", "", err
	}

	authenticityToken := strings.Split(strings.Split(string(bodyPrepare), `<input type="hidden" name="authenticity_token" value="`)[1], "\"")[0]

	var captchaResponse string
	if strings.Contains(string(bodyPrepare), "g-recaptcha") {
		captchaResponse, err = requestCaptcha("6LeoeSkTAAAAAA9rkZs5oS82l69OEYjKRZAiKdaF", "checkout.shopify.com")
		if err != nil {
			log.Fatal(err)
		}
	}

	bodyString := `_method=patch&authenticity_token=` + authenticityToken + `&previous_step=contact_information&step=shipping_method&checkout%5Bemail_or_phone%5D=` + email + `&checkout%5Bemail%5D=` + email + `&checkout%5Bbuyer_accepts_marketing%5D=0&checkout%5Bbuyer_accepts_marketing%5D=1&checkout%5Bshipping_address%5D%5Bfirst_name%5D=&checkout%5Bshipping_address%5D%5Blast_name%5D=&checkout%5Bshipping_address%5D%5Bcompany%5D=&checkout%5Bshipping_address%5D%5Baddress1%5D=&checkout%5Bshipping_address%5D%5Baddress2%5D=&checkout%5Bshipping_address%5D%5Bcity%5D=&checkout%5Bshipping_address%5D%5Bcountry%5D=&checkout%5Bshipping_address%5D%5Bprovince%5D=&checkout%5Bshipping_address%5D%5Bzip%5D=&checkout%5Bshipping_address%5D%5Bphone%5D=&checkout%5Bshipping_address%5D%5Bfirst_name%5D=` + firstName + `&checkout%5Bshipping_address%5D%5Blast_name%5D=` + lastName + `&checkout%5Bshipping_address%5D%5Bcompany%5D=&checkout%5Bshipping_address%5D%5Baddress1%5D=` + address + `&checkout%5Bshipping_address%5D%5Baddress2%5D=&checkout%5Bshipping_address%5D%5Bzip%5D=` + zipCode + `&checkout%5Bshipping_address%5D%5Bcity%5D=` + city + `&checkout%5Bshipping_address%5D%5Bcountry%5D=` + country + `&checkout%5Bshipping_address%5D%5Bphone%5D=` + phoneNumber + `&g-recaptcha-response=` + captchaResponse + `&checkout%5Bremember_me%5D=false&checkout%5Bremember_me%5D=0&checkout%5Bclient_details%5D%5Bbrowser_width%5D=1920&checkout%5Bclient_details%5D%5Bbrowser_height%5D=979&checkout%5Bclient_details%5D%5Bjavascript_enabled%5D=1&checkout%5Bclient_details%5D%5Bcolor_depth%5D=24&checkout%5Bclient_details%5D%5Bjava_enabled%5D=false&checkout%5Bclient_details%5D%5Bbrowser_tz%5D=-120`
	bodyInfo := strings.NewReader(bodyString)

	reqInfo, err := http.NewRequest("POST", respPrepare.Request.URL.String(), bodyInfo)
	if err != nil {
		return "", "", "", "", err
	}
	reqInfo.Header.Set("Authority", urlParsed.Host)
	reqInfo.Header.Set("Cache-Control", "max-age=0")
	reqInfo.Header.Set("Upgrade-Insecure-Requests", "1")
	reqInfo.Header.Set("Origin", site)
	reqInfo.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	reqInfo.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
	reqInfo.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	reqInfo.Header.Set("Sec-Fetch-Site", "same-origin")
	reqInfo.Header.Set("Sec-Fetch-Mode", "navigate")
	reqInfo.Header.Set("Sec-Fetch-User", "?1")
	reqInfo.Header.Set("Sec-Fetch-Dest", "document")
	reqInfo.Header.Set("Referer", site)
	reqInfo.Header.Set("Accept-Language", "en-US,en;q=0.9,fr;q=0.8")

	respInfo, err := client.Do(reqInfo)
	if err != nil {
		return "", "", "", "", err
	}
	defer respInfo.Body.Close()

	respInfoBody, err := ioutil.ReadAll(respInfo.Body)
	if err != nil {
		return "", "", "", "", err
	}

	authenticityToken = strings.Split(strings.Split(string(respInfoBody), `<input type="hidden" name="authenticity_token" value="`)[1], "\"")[0]
	shippingMethod := strings.Split(strings.Split(string(respInfoBody), `<div class="radio-wrapper" data-shipping-method="`)[1], "\"")[0]

	bodyShipping := `_method=patch&authenticity_token=` + authenticityToken + `&previous_step=shipping_method&step=payment_method&checkout%5Bshipping_rate%5D%5Bid%5D=` + shippingMethod + `&checkout%5Bclient_details%5D%5Bbrowser_width%5D=1920&checkout%5Bclient_details%5D%5Bbrowser_height%5D=979&checkout%5Bclient_details%5D%5Bjavascript_enabled%5D=1&checkout%5Bclient_details%5D%5Bcolor_depth%5D=24&checkout%5Bclient_details%5D%5Bjava_enabled%5D=false&checkout%5Bclient_details%5D%5Bbrowser_tz%5D=-120`
	body := strings.NewReader(bodyShipping)
	reqShipping, err := http.NewRequest("POST", respPrepare.Request.URL.String(), body)
	if err != nil {
		return "", "", "", "", err
	}
	reqShipping.Header.Set("Authority", urlParsed.Host)
	reqShipping.Header.Set("Cache-Control", "max-age=0")
	reqShipping.Header.Set("Upgrade-Insecure-Requests", "1")
	reqShipping.Header.Set("Origin", site)
	reqShipping.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	reqShipping.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
	reqShipping.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	reqShipping.Header.Set("Sec-Fetch-Site", "same-origin")
	reqShipping.Header.Set("Sec-Fetch-Mode", "navigate")
	reqShipping.Header.Set("Sec-Fetch-User", "?1")
	reqShipping.Header.Set("Sec-Fetch-Dest", "document")
	reqShipping.Header.Set("Referer", site)
	reqShipping.Header.Set("Accept-Language", "en-US,en;q=0.9,fr;q=0.8")

	respShipping, err := client.Do(reqShipping)
	if err != nil {
		return "", "", "", "", err
	}
	defer respShipping.Body.Close()

	bodyCard, err := ioutil.ReadAll(respShipping.Body)
	if err != nil {
		return "", "", "", "", err
	}

	var gatewayID string
	var priceTarget string

	if strings.Contains(string(bodyCard), "Calculating") || len(strings.Split(string(bodyCard), `<span data-brand-icons-for-gateway="`)) == 0 {
		reqCalculating, err := http.NewRequest("GET", respPrepare.Request.URL.String(), nil)
		reqCalculating.Header.Set("Authority", urlParsed.Host)
		reqCalculating.Header.Set("Upgrade-Insecure-Request", "1")
		reqCalculating.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
		reqCalculating.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
		reqCalculating.Header.Set("Sec-Fetch-Site", "none")
		reqCalculating.Header.Set("Sec-Fetch-Mode", "navigate")
		reqCalculating.Header.Set("Sec-Fetch-User", "?1")
		reqCalculating.Header.Set("Sec-Fetch-Dest", "document")

		respCalculating, err := client.Do(reqCalculating)
		if err != nil {
			return "", "", "", "", err
		}
		defer respCalculating.Body.Close()

		bodyCard, err = ioutil.ReadAll(respCalculating.Body)
		if err != nil {
			return "", "", "", "", err
		}

		authenticityToken = strings.Split(strings.Split(string(bodyCard), `<input type="hidden" name="authenticity_token" value="`)[1], "\"")[0]
		gatewayID = strings.Split(strings.Split(string(bodyCard), `<span data-brand-icons-for-gateway="`)[1], "\"")[0]
		priceTarget = strings.Split(strings.Split(string(bodyCard), `<span class="total-recap__final-price" data-checkout-payment-due-target="`)[1], "\"")[0]

	} else {

		authenticityToken = strings.Split(strings.Split(string(bodyCard), `<input type="hidden" name="authenticity_token" value="`)[1], "\"")[0]

		err = ioutil.WriteFile("output.txt", bodyCard, 0644)
		if err != nil {
			panic(err)
		}

		gatewayID = strings.Split(strings.Split(string(bodyCard), `<span data-brand-icons-for-gateway="`)[1], "\"")[0]
		priceTarget = strings.Split(strings.Split(string(bodyCard), `<span class="total-recap__final-price" data-checkout-payment-due-target="`)[1], "\"")[0]
	}

	return respPrepare.Request.URL.String(), gatewayID, authenticityToken, priceTarget, nil
}

// ShopifyPayment is used to send request for the payment gateway
func (c *Cashout) ShopifyPayment(urlShop, authenticityToken, gatewayID, priceTarget, name, number string, month, year int, ccv string, client *http.Client) error {
	parsedURL, err := url.Parse(urlShop)
	if err != nil {
		return err
	}

	data := Payload{
		CreditCard: CreditCard{
			Number:            number,
			Name:              name,
			StartMonth:        nil,
			StartYear:         nil,
			Month:             month,
			Year:              year,
			VerificationValue: ccv,
			IssueNumber:       "",
		},
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		return err
	}
	bodyPayment := bytes.NewReader(payloadBytes)

	urlString := strings.Split(urlShop, "/")
	reqPayment, err := http.NewRequest("POST", "https://deposit.us.shopifycs.com/sessions", bodyPayment)
	if err != nil {
		return err
	}
	reqPayment.Header.Set("Connection", "keep-alive")
	reqPayment.Header.Set("Accept", "application/json")
	reqPayment.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
	reqPayment.Header.Set("Content-Type", "application/json")
	reqPayment.Header.Set("Origin", "https://checkout.us.shopifycs.com")
	reqPayment.Header.Set("Sec-Fetch-Site", "same-site")
	reqPayment.Header.Set("Sec-Fetch-Mode", "cors")
	reqPayment.Header.Set("Sec-Fetch-Dest", "empty")
	reqPayment.Header.Set("Referer", "https://checkout.us.shopifycs.com/number?identifier="+urlString[5]+"&location="+urlShop+"f&dir=ltr")
	reqPayment.Header.Set("Accept-Language", "en-US,en;q=0.9,fr;q=0.8")

	respPayment, err := client.Do(reqPayment)
	if err != nil {
		return err
	}
	defer respPayment.Body.Close()

	bodyResponsePayment, err := ioutil.ReadAll(respPayment.Body)
	if err != nil {
		return err
	}

	var sessionAnswer SessionAnswer
	err = json.Unmarshal(bodyResponsePayment, &sessionAnswer)
	if err != nil {
		return err
	}

	body := strings.NewReader(`_method=patch&authenticity_token=` + authenticityToken + `&previous_step=payment_method&step=&s=` + sessionAnswer.ID + `&checkout%5Bpayment_gateway%5D=` + gatewayID + `&checkout%5Bcredit_card%5D%5Bvault%5D=false&checkout%5Bdifferent_billing_address%5D=false&checkout%5Bremember_me%5D=false&checkout%5Bremember_me%5D=0&checkout%5Bvault_phone%5D=&checkout%5Btotal_price%5D=` + priceTarget + `&complete=1&checkout%5Bclient_details%5D%5Bbrowser_width%5D=1920&checkout%5Bclient_details%5D%5Bbrowser_height%5D=979&checkout%5Bclient_details%5D%5Bjavascript_enabled%5D=1&checkout%5Bclient_details%5D%5Bcolor_depth%5D=24&checkout%5Bclient_details%5D%5Bjava_enabled%5D=false&checkout%5Bclient_details%5D%5Bbrowser_tz%5D=-120`)
	req, err := http.NewRequest("POST", urlShop, body)
	if err != nil {
		return err
	}
	req.Header.Set("Authority", parsedURL.Host)
	req.Header.Set("Cache-Control", "max-age=0")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("Origin", "https://"+parsedURL.Host)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("Sec-Fetch-Mode", "navigate")
	req.Header.Set("Sec-Fetch-User", "?1")
	req.Header.Set("Sec-Fetch-Dest", "document")
	req.Header.Set("Referer", "https://"+parsedURL.Host)
	req.Header.Set("Accept-Language", "en-US,en;q=0.9,fr;q=0.8")

	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	bodyPaymentYes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if strings.Contains(string(bodyPaymentYes), "Error - Payment") {
		return errors.New("payment declined")
	}

	return nil
}
